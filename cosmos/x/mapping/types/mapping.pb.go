// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/mapping/v1beta1/mapping.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterDevice struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" yaml:"device_id"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
}

func (m *MsgRegisterDevice) Reset()      { *m = MsgRegisterDevice{} }
func (*MsgRegisterDevice) ProtoMessage() {}
func (*MsgRegisterDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ca1e2f961189613, []int{0}
}
func (m *MsgRegisterDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDevice.Merge(m, src)
}
func (m *MsgRegisterDevice) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDevice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDevice proto.InternalMessageInfo

func (m *MsgRegisterDevice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterDevice) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *MsgRegisterDevice) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgRegisterDeviceResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MsgRegisterDeviceResponse) Reset()      { *m = MsgRegisterDeviceResponse{} }
func (*MsgRegisterDeviceResponse) ProtoMessage() {}
func (*MsgRegisterDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ca1e2f961189613, []int{1}
}
func (m *MsgRegisterDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDeviceResponse.Merge(m, src)
}
func (m *MsgRegisterDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDeviceResponse proto.InternalMessageInfo

func (m *MsgRegisterDeviceResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRegisterDevice)(nil), "cosmos.mapping.v1beta1.MsgRegisterDevice")
	proto.RegisterType((*MsgRegisterDeviceResponse)(nil), "cosmos.mapping.v1beta1.MsgRegisterDeviceResponse")
}

func init() {
	proto.RegisterFile("cosmos/mapping/v1beta1/mapping.proto", fileDescriptor_8ca1e2f961189613)
}

var fileDescriptor_8ca1e2f961189613 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xe2, 0x30,
	0x14, 0xc7, 0x63, 0x90, 0xb8, 0xc3, 0x03, 0xba, 0x8b, 0x10, 0xc7, 0x21, 0x64, 0x2a, 0xab, 0x43,
	0x5b, 0x95, 0x44, 0x81, 0x8d, 0x6e, 0xa8, 0x4b, 0x07, 0x96, 0x8c, 0x5d, 0x2a, 0x93, 0x58, 0x26,
	0x2a, 0x89, 0xa3, 0xd8, 0xa0, 0xb2, 0x55, 0xfd, 0x04, 0x55, 0xbb, 0x75, 0xec, 0xd4, 0x8f, 0xd2,
	0x11, 0xa9, 0x0b, 0x13, 0x2a, 0xa1, 0x43, 0x47, 0xc4, 0x27, 0xa8, 0x88, 0x13, 0x06, 0xe8, 0xd0,
	0x25, 0x79, 0xcf, 0xff, 0x9f, 0xfd, 0xfe, 0xcf, 0xcf, 0xf0, 0xd0, 0xe1, 0xc2, 0xe7, 0xc2, 0xf4,
	0x49, 0x18, 0x7a, 0x01, 0x33, 0xc7, 0x56, 0x9f, 0x4a, 0x62, 0x65, 0xb9, 0x11, 0x46, 0x5c, 0x72,
	0xbd, 0xa2, 0x28, 0x23, 0x5b, 0x4d, 0xa9, 0x5a, 0x99, 0x71, 0xc6, 0x13, 0xc4, 0xdc, 0x44, 0x8a,
	0xae, 0xd5, 0x19, 0xe7, 0x6c, 0x48, 0x4d, 0x12, 0x7a, 0x26, 0x09, 0x02, 0x2e, 0x89, 0xf4, 0x78,
	0x20, 0x94, 0x8a, 0x9f, 0x01, 0xfc, 0xdb, 0x13, 0xcc, 0xa6, 0xcc, 0x13, 0x92, 0x46, 0xe7, 0x74,
	0xec, 0x39, 0x54, 0x3f, 0x85, 0xbf, 0x9c, 0x88, 0x12, 0xc9, 0xa3, 0x2a, 0x38, 0x00, 0x47, 0xc5,
	0xae, 0xbe, 0x9e, 0x37, 0x4a, 0x13, 0xe2, 0x0f, 0x3b, 0x38, 0x15, 0xb0, 0x9d, 0x21, 0xba, 0x05,
	0x8b, 0x6e, 0xb2, 0xef, 0xca, 0x73, 0xab, 0xb9, 0x84, 0x2f, 0xaf, 0xe7, 0x8d, 0x3f, 0x8a, 0xdf,
	0x4a, 0xd8, 0xfe, 0xad, 0xe2, 0x0b, 0x77, 0x53, 0x80, 0xb8, 0x6e, 0x44, 0x85, 0xa8, 0xe6, 0x77,
	0x0b, 0xa4, 0x02, 0xb6, 0x33, 0x04, 0xb7, 0xe1, 0xff, 0x3d, 0x8f, 0x36, 0x15, 0x21, 0x0f, 0x04,
	0xd5, 0x2b, 0xb0, 0x10, 0x51, 0x31, 0x1a, 0x4a, 0x65, 0xd5, 0x4e, 0xb3, 0xd6, 0x13, 0x80, 0xf9,
	0x9e, 0x60, 0xfa, 0x03, 0x80, 0xa5, 0x9d, 0xf6, 0x8e, 0x8d, 0xef, 0x6f, 0xd0, 0xd8, 0xab, 0x52,
	0xb3, 0x7e, 0x8c, 0x66, 0x86, 0x30, 0xbe, 0x7b, 0xfb, 0x78, 0xcc, 0xd5, 0xf1, 0x3f, 0x33, 0x9d,
	0x66, 0x94, 0x72, 0x4d, 0xd5, 0x7e, 0x07, 0x9c, 0x74, 0x07, 0xd3, 0x05, 0xd2, 0x66, 0x0b, 0xa4,
	0xad, 0x16, 0x08, 0xdc, 0xc6, 0x08, 0xbc, 0xc4, 0x08, 0xbc, 0xc6, 0x08, 0x4c, 0x63, 0x04, 0xde,
	0x63, 0x04, 0x3e, 0x63, 0xa4, 0xad, 0x62, 0x04, 0xee, 0x97, 0x48, 0x9b, 0x2e, 0x91, 0x36, 0x5b,
	0x22, 0xed, 0xb2, 0xc5, 0x3c, 0x39, 0x18, 0xf5, 0x0d, 0x87, 0xfb, 0xd9, 0xd9, 0xea, 0xd7, 0x14,
	0xee, 0xb5, 0x79, 0xb3, 0x7d, 0x36, 0x72, 0x12, 0x52, 0x71, 0x96, 0x7c, 0xfb, 0x85, 0x64, 0xce,
	0xed, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x80, 0x46, 0xf2, 0x5b, 0x02, 0x00, 0x00,
}

func (this *MsgRegisterDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterDevice)
	if !ok {
		that2, ok := that.(MsgRegisterDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *MsgRegisterDeviceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterDeviceResponse)
	if !ok {
		that2, ok := that.(MsgRegisterDeviceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *MsgRegisterDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.MsgRegisterDevice{")
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgRegisterDeviceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.MsgRegisterDeviceResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMapping(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error) {
	out := new(MsgRegisterDeviceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.mapping.v1beta1.Msg/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterDevice(context.Context, *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterDevice(ctx context.Context, req *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.mapping.v1beta1.Msg/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDevice(ctx, req.(*MsgRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.mapping.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _Msg_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/mapping/v1beta1/mapping.proto",
}

func (m *MsgRegisterDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapping(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapping(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}

func (m *MsgRegisterDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}

func sovMapping(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapping(x uint64) (n int) {
	return sovMapping(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MsgRegisterDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgRegisterDevice{`,
		`Creator:` + fmt.Sprintf("%v", this.Creator) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgRegisterDeviceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgRegisterDeviceResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMapping(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MsgRegisterDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapping(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapping
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapping
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapping
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapping        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapping          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapping = fmt.Errorf("proto: unexpected end of group")
)
